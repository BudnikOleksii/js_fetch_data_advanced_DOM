{"version":3,"sources":["scripts/requests.js","scripts/main.js"],"names":["BASE_URL","ENDPOINTS","phones","phoneById","id","request","url","fetch","then","response","ok","Promise","reject","Error","status","statusText","json","module","exports","require","body","document","elementMaker","className","title","data","insertAdjacentHTML","map","el","name","join","getFirstReceivedDetails","ids","race","res","getAllSuccessfulDetails","allSettled","filter","item","phone","value","getThreeFastestDetails","promises","i","push","all","console","log","phonesIds","forEach"],"mappings":";AAAA,aAEA,IAAMA,EAAW,4DACXC,EAAY,CAChBC,OAAQ,eACRC,UAAW,SAACC,GAAkBA,MAAAA,WAAAA,OAAAA,EAAnB,WAGPC,EAAU,SAACC,GACRC,OAAAA,MAASP,GAAAA,OAAAA,GAAWM,OAAAA,IACxBE,KAAK,SAAAC,GAOGA,OANFA,EAASC,IACZC,QAAQC,OACN,IAAIC,MAASJ,GAAAA,OAAAA,EAASK,OAAWL,MAAAA,OAAAA,EAASM,cAIvCN,EAASO,UAItBC,OAAOC,QAAU,CACfjB,UAAAA,EAAWI,QAAAA;;ACtBb,aAE+Bc,IAAAA,EAAAA,QAAQ,cAA/BlB,EAAAA,EAAAA,UAAWI,EAAAA,EAAAA,QACbe,EAAOC,SAASD,KAEhBE,EAAe,SAACC,EAAWC,EAAOC,GACtCL,EAAKM,mBAAmB,YACRH,qBAAAA,OAAAA,EACNC,kBAAAA,OAAAA,EAEFC,+BAAAA,OAAAA,EAAKE,IAAI,SAAAC,GAAaA,MAAAA,OAAAA,OAAAA,EAAGC,KAAd,WAA2BC,KAAK,IAJnD,mCAUIC,EAA0B,SAACC,GAC/BrB,QAAQsB,KAAKD,EAAIL,IAAI,SAAAvB,GAAMC,OAAAA,EAAQJ,EAAUE,UAAUC,OACpDI,KAAK,SAAA0B,GACJZ,EAAa,iBAAkB,gBAAiB,CAACY,OAIjDC,EAA0B,SAACH,GAC/BrB,QAAQyB,WAAWJ,EAAIL,IAAI,SAAAvB,GAAMC,OAAAA,EAAQJ,EAAUE,UAAUC,OAC1DI,KAAK,SAAA0B,GACJZ,EAAa,iBAAkB,iBAC7BY,EAAIG,OAAO,SAAAC,GAAQA,MAAgB,cAAhBA,EAAKxB,SACrBa,IAAI,SAAAY,GAASA,OAAAA,EAAMC,YAIxBC,EAAyB,SAACT,GAGzB,IAFCU,IAAAA,EAAW,GAERC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAASE,KAAKjC,QAAQsB,KACpBD,EAAIL,IAAI,SAAAvB,GAAMC,OAAAA,EAAQJ,EAAUE,UAAUC,QAI9CO,QAAQkC,IAAIH,GAAUlC,KAAK,SAAA0B,GAAOY,OAAAA,QAAQC,IAAIb,MAGhD7B,EAAQJ,EAAUC,QACfM,KAAK,SAAAN,GACE8C,IAAAA,EAAY,GAElB9C,EAAO+C,QAAQ,SAAAV,GAASS,OAAAA,EAAUJ,KAAKL,EAAMnC,MAE7C2B,EAAwBiB,GACxBb,EAAwBa,GACxBP,EAAuBO","file":"main.852b5f18.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\nconst ENDPOINTS = {\n  phones: '/phones.json',\n  phoneById: (id) => `/phones/${id}.json`,\n};\n\nconst request = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        Promise.reject(\n          new Error(`${response.status}: ${response.statusText}`)\n        );\n      }\n\n      return response.json();\n    });\n};\n\nmodule.exports = {\n  ENDPOINTS, request,\n};\n","'use strict';\n\nconst { ENDPOINTS, request } = require('./requests');\nconst body = document.body;\n\nconst elementMaker = (className, title, data) => {\n  body.insertAdjacentHTML('beforeend', `\n    <div class=\"${className}\">\n      <h3>${title}</h3>\n      <ul>\n        ${data.map(el => `<li>${el.name}</li>`).join('')}\n      </ul>\n    </div>\n  `);\n};\n\nconst getFirstReceivedDetails = (ids) => {\n  Promise.race(ids.map(id => request(ENDPOINTS.phoneById(id))))\n    .then(res => {\n      elementMaker('first-received', 'First Fastest', [res]);\n    });\n};\n\nconst getAllSuccessfulDetails = (ids) => {\n  Promise.allSettled(ids.map(id => request(ENDPOINTS.phoneById(id))))\n    .then(res => {\n      elementMaker('all-successful', 'All Successful',\n        res.filter(item => item.status === 'fulfilled')\n          .map(phone => phone.value));\n    });\n};\n\nconst getThreeFastestDetails = (ids) => {\n  const promises = [];\n\n  for (let i = 0; i < 3; i++) {\n    promises.push(Promise.race(\n      ids.map(id => request(ENDPOINTS.phoneById(id)))\n    ));\n  }\n\n  Promise.all(promises).then(res => console.log(res)); // eslint-disable-line\n};\n\nrequest(ENDPOINTS.phones)\n  .then(phones => {\n    const phonesIds = [];\n\n    phones.forEach(phone => phonesIds.push(phone.id));\n\n    getFirstReceivedDetails(phonesIds);\n    getAllSuccessfulDetails(phonesIds);\n    getThreeFastestDetails(phonesIds);\n  });\n"]}